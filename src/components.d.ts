/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  EventOptions,
} from './test-helpers/dom/fire-event';

declare global {

  namespace StencilComponents {
    interface InstrumentedElement {
      'getEvents': () => EventOptions[];
      'instrumentElement': (element: HTMLElement) => void;
      'listenTo': (event: EventOptions, element?: HTMLElement, valueToInclude?: (EventOptions: any) => EventOptions) => void;
      'resetEvents': () => void;
    }
  }

  interface HTMLInstrumentedElementElement extends StencilComponents.InstrumentedElement, HTMLStencilElement {}

  var HTMLInstrumentedElementElement: {
    prototype: HTMLInstrumentedElementElement;
    new (): HTMLInstrumentedElementElement;
  };
  interface HTMLElementTagNameMap {
    'instrumented-element': HTMLInstrumentedElementElement;
  }
  interface ElementTagNameMap {
    'instrumented-element': HTMLInstrumentedElementElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'instrumented-element': JSXElements.InstrumentedElementAttributes;
    }
  }
  namespace JSXElements {
    export interface InstrumentedElementAttributes extends HTMLAttributes {

    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;